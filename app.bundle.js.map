{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/zoom_reset_icon_dark.svg","webpack:///./src/components/Slider.js","webpack:///./src/utils/index.js","webpack:///./src/components/ChinaChronological.js","webpack:///./src/components/PrefecturalChina.js","webpack:///./src/components/PrefecturalChinaV2.js","webpack:///./src/utils/api.js","webpack:///./config/config.js","webpack:///./src/utils/blankerl/index.js","webpack:///./src/app.js","webpack:///./src/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","React","ZoomResetIconDark","props","createElement","defaultProps","default","Container","styled","div","Bar","Thumb","attrs","style","left","LabelRow","StartDate","EndDate","Slider","state","xPosition","bar","onMouseDownHandler","_onMouseDownHandler","onMouseMoveHandler","_onMouseMoveHandler","onMouseUpHandler","_onMouseUpHandler","startXPosition","barWidth","thumb","currentStep","this","updateData","totalSteps","Math","ceil","e","difference","touches","clientX","ratio","setState","_passCurrentStep","clientWidth","getBoundingClientRect","document","addEventListener","removeEventListener","startLabel","endLabel","type","ref","node","onTouchStart","onMouseDown","Component","propTypes","PropTypes","number","isRequired","func","string","formatNumber","num","toString","replace","mapLegends","CanvasContainer","HongContainer","MacauContainer","Geo","svg","width","GeoHongKong","GeoMacau","LocationLabel","ToolTip","Header","NumericMapLegend","Legend","ColorIcon","backgrounColor","SliderWrapper","stageColorMap","1","2","3","4","5","6","strokeWidth","strokeColor","Map","generateTooltipContent","adcode","entity","confirmed","suspected","cured","dead","SubCanvasContainer","LegendContainer","LegendsWrapper","ToolTipWrapper","ResetZoom","confirmedCount","curedCount","currentConfirmedCount","suspectedCount","deadCount","PrefecturalChinaV2","test","map","canvasContainer","centered","tooltip","isTransitioning","updateLegendStage","_updateLegendStage","zoom","hookUpZoomMap","_hookupZoom","d3","on","_cleanCanvas","_drawChina","scaleExtent","_customizedZoom","selectAll","attr","transform","d3SelectedMap","transition","duration","end","then","console","log","dateObject","Date","latestUpdatedTimeStamp","dateString","getFullYear","getMonth","getDate","Legends","label","index","legendStage","remove","_resetCustomizedZoom","path","x","y","scaleValue","bounds","centroidX","centroidY","dx","dy","clientHeight","min","filter","prefecture","properties","parent","province","_cleanOutPrefectures","_zoomIn","isProvince","entities","provinces","cities","count","stage","height","projection","scale","center","translate","level","d3SelectedTooltip","_getTransitionStatus","getTooltipData","features","prefectures","enter","append","_colorProcessor","_onClickProvince","_onClickPrefecture","html","_renderDefaultToolTipContent","countryData","innerHTML","onClick","_zoomOut","_renderLegend","PureComponent","coronavirusAPIOrigin","coronavirusAPIPath","asyncResolver","promise","res","error","response","json","fetch","results","fetchCoronavirusAreaData","fetchChianOverallData","extractData","fns","intialState","reduce","acc","fn","pipe","countryEnglishName","Array","isArray","updateTime","provincesData","citiesData","forEach","tmpCities","exceptionIndex","cityIds","city","locationId","h1","Section","MapContainer","App","coronavirusDataPrefecturalLevel","coronavirusCountryLevel","API","countryRes","ReactDOM","render","getElementById"],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([217,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var React = require('react');\n\nfunction ZoomResetIconDark (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"g\",{\"id\":\"chinamap_return_btn_default\",\"transform\":\"translate(-1096 -285)\"},[React.createElement(\"g\",{\"id\":\"Ellipse_8\",\"data-name\":\"Ellipse 8\",\"transform\":\"translate(1096 285)\",\"fill\":\"#fff\",\"stroke\":\"#000\",\"strokeWidth\":\"2\",\"key\":0},[React.createElement(\"circle\",{\"cx\":\"16\",\"cy\":\"16\",\"r\":\"16\",\"stroke\":\"none\",\"key\":0}),React.createElement(\"circle\",{\"cx\":\"16\",\"cy\":\"16\",\"r\":\"15\",\"fill\":\"none\",\"key\":1})]),React.createElement(\"g\",{\"id\":\"return-arrow-curve-pointing-left\",\"transform\":\"translate(1103 289.46)\",\"key\":1},React.createElement(\"path\",{\"id\":\"Path_1457\",\"data-name\":\"Path 1457\",\"d\":\"M5.986,19.748v-2.4A.347.347,0,0,1,6.333,17h5.583a2.876,2.876,0,1,0,0-5.752l-6.454,0,2.5,2.486a.353.353,0,0,1,0,.486L6.407,15.768a.344.344,0,0,1-.486,0L.1,9.947a.343.343,0,0,1,0-.486l5.82-5.82a.344.344,0,0,1,.486,0L7.958,5.192a.344.344,0,0,1,0,.486l-2.5,2.477,6.454,0a5.967,5.967,0,1,1,0,11.935l-5.583,0A.347.347,0,0,1,5.986,19.748Z\",\"transform\":\"translate(0 0)\"}))]));\n}\n\nZoomResetIconDark.defaultProps = {\"width\":\"32\",\"height\":\"32\",\"viewBox\":\"0 0 32 32\"};\n\nmodule.exports = ZoomResetIconDark;\n\nZoomResetIconDark.default = ZoomResetIconDark;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Container = styled.div`\n\n`;\n\nconst Bar = styled.div`\n  height: 13px;\n  background: white;\n  border-radius: 5px;\n  position: relative;\n  flex-grow: 1;\n  margin-bottom: 14px;\n`;\n\nconst Thumb = styled.div.attrs(props => ({\n  style: {\n    left: `${props.left || 0}%`,\n  },\n}))`\n  position: absolute;\n  top: 50%;\n  border-radius: 5px;\n  height: 20px;\n  width: 11px;\n  background-color: #A0A0A0;\n  transform: translate(-50%, -50%);\n  @media (max-width: 767px) {\n    height: 25px;\n    width: 14px;\n  }\n`;\n\nconst LabelRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst StartDate = styled.div`\n\n`\nconst EndDate = styled.div`\n\n`\n\n\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xPosition: 0,\n    };\n    this.bar = null;\n    this.onMouseDownHandler = this._onMouseDownHandler.bind(this);\n    this.onMouseMoveHandler = this._onMouseMoveHandler.bind(this);\n    this.onMouseUpHandler = this._onMouseUpHandler.bind(this);\n    this.startXPosition = null;\n    this.barWidth = null\n    this.thumb = null;\n    this.currentStep = 0;\n  }\n\n  componentWillUnmount() {\n    // document.removeEventListener('mouseup', this.onMouseUpHandler)\n  }\n\n  componentDidMount() {\n\n  }\n\n  _passCurrentStep() {\n    const { updateData, totalSteps } = this.props;\n    const { xPosition } = this.state;\n    const currentStep = Math.ceil(xPosition / (100 / totalSteps));\n    if (currentStep !== this.currentStep && currentStep < totalSteps) {\n      this.currentStep = currentStep;\n      updateData(currentStep);\n    }\n  }\n\n  _onMouseMoveHandler(e) {\n    const pointer = e.touches ? e.touches[0] : e;\n    const difference = pointer.clientX - this.startXPosition;\n    const ratio = (difference / this.barWidth) * 100;\n    if (difference <= 0) {\n      this.setState({\n        xPosition: 0,\n      }, () => {\n        this._passCurrentStep();\n      });\n      return;\n    }\n    if (ratio >= 0 && ratio <= 100) {\n      this.setState({\n        xPosition: ratio,\n      }, () => {\n        this._passCurrentStep();\n      });\n    }\n  }\n\n  _onMouseDragHandler() {\n\n  }\n\n  _onMouseDownHandler(e) {\n    this.barWidth = this.bar.clientWidth;\n    this.startXPosition = this.bar.getBoundingClientRect().left;\n    document.addEventListener('mousemove', this.onMouseMoveHandler);\n    document.addEventListener('touchmove', this.onMouseMoveHandler);\n    document.addEventListener('mouseup', this.onMouseUpHandler);\n    document.addEventListener('touchend', this.onMouseUpHandler);\n  }\n\n  _onMouseUpHandler(e) {\n    document.removeEventListener('mousemove', this.onMouseMoveHandler);\n    document.removeEventListener('touchmove', this.onMouseMoveHandler);\n    document.removeEventListener('mouseup', this.onMouseUpHandler);\n    document.removeEventListener('touchend', this.onMouseUpHandler);\n  }\n\n  render() {\n    const { totalSteps, startLabel, endLabel } = this.props;\n    const { xPosition } = this.state;\n    return (\n      <Container>\n        <Bar\n          type=\"range\"\n          ref={node => { this.bar = node; }}\n        >\n          <Thumb\n            onTouchStart={this.onMouseDownHandler}\n            onMouseDown={this.onMouseDownHandler}\n            left={xPosition}\n            ref={node => { this.thumb = node; }}\n          />\n        </Bar>\n        <LabelRow>\n          <StartDate>\n            {startLabel}\n          </StartDate>\n          <EndDate>\n            {endLabel}\n          </EndDate>\n        </LabelRow>\n      </Container>\n    );\n  }\n}\n\nSlider.defaultProps = {\n};\n\nSlider.propTypes = {\n  totalSteps: PropTypes.number.isRequired,\n  updateData: PropTypes.func.isRequired,\n  startLabel: PropTypes.string.isRequired,\n  endLabel: PropTypes.string.isRequired,\n};\n\nexport default Slider;\n","function formatNumber(num) {\n  try {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  } catch (e) {\n    return 0;\n  }\n}\n\nfunction throttle(fn, interval) {\n  let lastExecutedTime = null;\n  let dormnatInterval = null;\n  return function decorator(...args) {\n    if (lastExecutedTime) {\n      dormnatInterval = Date.now() - lastExecutedTime;\n    }\n    if (!lastExecutedTime || (lastExecutedTime && (dormnatInterval >= interval))) {\n      fn.apply(this, args);\n      lastExecutedTime = Date.now();\n    }\n  };\n}\n\nexport {\n  formatNumber,\n  throttle,\n};\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport china from '../data/zh-mainland-provinces.json';\nimport hongKong from '../data/hong-kong.json';\nimport macau from '../data/macau.json';\nimport Slider from './Slider';\nimport { formatNumber, throttle } from '../utils';\n\n\nconst mapLegends = ['0', '1 - 10', '11 - 20', '21 - 100', '100 +', '1000 +', '10,000 +'];\n\nconst width = 700;\nconst mapRatio = 0.58;\nconst height = width * mapRatio;\nconst scaleRatio = 0.71;\nconst DEFAULT_MAP_COLOR = '#DADADA';\nconst BORDER_COLOR = '#333';\nconst centerChinaLongtitude = 104.4898;\nconst centerChinaLatitude = 37.5854;\n\nconst widthHongKong = 130;\nconst mapRatioHongKong = 0.73;\nconst heightSAR = widthHongKong * mapRatioHongKong;\nconst scaleRatioHongKong = 70;\n\n\nconst scaleRatioMacau = 200;\n\n\nconst mobileBreakPoint = '600px';\n\nconst Container = styled.div`\n  max-width: ${width}px;\n  margin: 0 auto;\n`;\n\nconst CanvasContainer = styled.div`\n  max-width: ${width}px;\n  box-sizing: content-box;\n  position: relative;\n`;\n\nconst HongContainer = styled.div`\n  width: 16%;\n  box-sizing: content-box;\n  position: absolute;\n  right: 6%;\n  bottom: 33%;\n  border: 1px solid black;\n  border-radius: 5px;\n  text-align: center;\n  @media (max-width: ${mobileBreakPoint}) {\n    right: 8%;\n  }\n`;\n\nconst MacauContainer = styled.div`\n  width: 16%;\n  box-sizing: content-box;\n  position: absolute;\n  right: 6%;\n  bottom: 5%;\n  border: 1px solid black;\n  border-radius: 5px;\n  text-align: center;\n  @media (max-width: ${mobileBreakPoint}) {\n    bottom: 8%;\n    right: 8%;\n  }\n`;\n\nconst Geo = styled.svg`\n  margin: 20px auto;\n  width: 100%;\n  height: ${height}px;\n  @media (max-width: ${mobileBreakPoint}) {\n    margin-bottom: 40px;\n  }\n`;\n\nconst GeoHongKong = styled.svg`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  right: 0;\n  top: 0;\n  left: 0;\n`;\n\nconst GeoMacau = styled.svg`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  right: 0;\n  top: 0;\n  left: 0;\n`;\n\nconst LocationLabel = styled.div`\n  position: absolute;\n  bottom: 10%;\n  right: 0;\n  left: 0;\n  width: 100%;\n  text-align:center;\n  font-size: 18px;\n  @media (max-width: 600px) {\n    font-size: 13px;\n  }\n`;\n\nconst ToolTip = styled.div`\n  color: #222;\n  background: #fff;\n  border-radius: 3px;\n  box-shadow: 0px 0px 2px 0px #a6a6a6;\n  padding: .5em;\n  text-shadow: #f5f5f5 0 1px 0;\n  opacity: 0.9;\n  position: fixed;\n  display: none;\n`;\n\nconst Header = styled.div`\n  color: #4E4E4E;\n  font-weight: 500;\n  font-size: 24px;\n`;\n\nconst NumericMapLegend = styled.div`\n  display: grid;\n  max-width: 50%;\n  grid-template-columns: auto auto auto auto;\n  margin: 20px 0 0 0;\n  @media (max-width: 767px) {\n    max-width: 60%;\n  }\n  @media (max-width: 600px) {\n    max-width: 100%;\n  }\n`;\n\nconst Legend = styled.div`\n  white-space: nowrap;\n  padding: 5px 0 5px 0;\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n`;\n\nconst ColorIcon = styled.div`\n  width: 14px;\n  height: 14px;\n  background-color: ${props => props.backgrounColor || 'white'};\n  border-radius: 50%;\n  margin-right: 5px;\n`;\n\nconst SliderWrapper = styled.div`\n  margin-top: 18px;\n`;\n\nconst stageColorMap = {\n  0: DEFAULT_MAP_COLOR,\n  1: '#F5C6E9',\n  2: '#D493BC',\n  3: '#BC659A',\n  4: '#803D79',\n  5: '#451458',\n  6: '#270048',\n};\n\nconst getInfectedStageFromCount = (count) => {\n  if (count === 0) {\n    return 0;\n  }\n  if (count >= 1 && count <= 10) {\n    return 1;\n  }\n  if (count >= 11 && count <= 20) {\n    return 2;\n  }\n  if (count >= 21 && count <= 100) {\n    return 3;\n  }\n  if (count >= 101 && count <= 1000) {\n    return 4;\n  }\n  if (count >= 1001 && count <= 10000) {\n    return 5;\n  }\n  if (count >= 10001 && count <= 100000) {\n    return 6;\n  }\n  return 0;\n};\n\n\nclass ChinaChronological extends Component {\n  constructor(props) {\n    super(props);\n    const { data } = this.props;\n    const sortedTimetamps = Object.keys(data);\n    const { dateString: startDateString } = data[sortedTimetamps[0]];\n    const { dateString: endDateString } = data[sortedTimetamps[sortedTimetamps.length - 1]];\n    this.startDate = startDateString;\n    this.endDate = endDateString;\n    this.state = {\n      dateString: startDateString,\n      step: 0,\n    };\n    this.geo = null;\n    this.geoHongKong = null;\n    this.geoMacau = null;\n    this.tooltip = null;\n    this.colorProcessor = this._colorProcessor.bind(this);\n    this.getConfirmedCount = this._getConfirmedCount.bind(this);\n    this.updateData = this._updateData.bind(this);\n    this.drawChina = this._drawChina.bind(this);\n    this.cleantToolTip = throttle(this._cleantToolTip.bind(this), 300);\n    this.canvasContainer = null;\n    this.hongKongContainer = null;\n    this.macauContainer = null;\n  }\n\n  componentDidMount() {\n    if (this.geo) {\n      // TODO: need to remove such listener\n      d3.select(window).on(`resize.${ChinaChronological.name}`, () => {\n        this._cleanCanvas();\n        this._drawChina();\n        this._drawHongKong();\n        this._drawMacau();\n      });\n      this._drawHongKong();\n      this._drawChina();\n      this._drawMacau();\n    }\n    document.addEventListener('scroll', this.cleantToolTip);\n  }\n\n  componentDidUpdate() {\n    if (this.geo) {\n      this._drawChina();\n      this._drawHongKong();\n      this._drawMacau();\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.cleantToolTip);\n  }\n\n  _cleantToolTip() {\n    if (this.tooltip.style.display !== 'none') {\n      this.tooltip.style.display = 'none';\n    }\n  }\n\n  _cleanCanvas() {\n    d3\n      .select(this.geo)\n      .selectAll('path')\n      .remove();\n    d3\n      .select(this.geoHongKong)\n      .selectAll('path')\n      .remove();\n    d3\n      .select(this.geoMacau)\n      .selectAll('path')\n      .remove();\n  }\n\n  _updateData(step) {\n    const { data } = this.props;\n    const sortedTimetamps = Object.keys(data);\n    const currentTimestamp = sortedTimetamps[step];\n    const { dateString } = data[currentTimestamp];\n    this.setState({\n      step,\n      dateString,\n    }, () => {\n      this._cleanCanvas();\n      this._drawChina();\n      this._drawHongKong();\n      this._drawMacau();\n    });\n  }\n\n  _colorProcessor(d) {\n    const { step } = this.state;\n    const { data } = this.props;\n    const sortedTimetamps = Object.keys(data);\n    const currentTimestamp = sortedTimetamps[step];\n    const provinceName = d.properties.name || d.properties.NAME;\n    const { data: provinceCountData, dateString } = data[currentTimestamp];\n    const stage = getInfectedStageFromCount(provinceCountData[provinceName]);\n    return stageColorMap[stage];\n  }\n\n  _getConfirmedCount(d) {\n    const { step } = this.state;\n    const { data } = this.props;\n    const sortedTimetamps = Object.keys(data);\n    const currentTimestamp = sortedTimetamps[step];\n    const provinceName = d.properties.name || d.properties.NAME;\n    const { data: provinceCountData, dateString } = data[currentTimestamp];\n    return provinceCountData[provinceName];\n  }\n\n  _drawMacau() {\n    const { step } = this.state;\n    const clientWidth = this.macauContainer.clientWidth;\n    const clientHeight = clientWidth * mapRatioHongKong;\n    this.macauContainer.style.height = `${clientHeight + (clientHeight * 0.3)}px`;\n    const projection = d3\n      .geoMercator()\n      .scale(clientWidth * scaleRatioMacau)\n      .center([centerChinaLongtitude + 9.06, centerChinaLatitude - 15.43])\n      .translate([clientWidth / 2, clientHeight / 2]);\n\n    const path = d3.geoPath(projection);\n    // const countries = topojson.feature(global, global.objects.countries).features;\n    const specialAdministrativeRegions = topojson.feature(macau, macau.objects.layer1).features;\n    const tooltip = d3.select(this.tooltip);\n    // const tooltipDimension = this.tooltip.getBoundingClientRect();\n    const tooltipTrack = this.tooltip;\n    const truncateSimplifiedMandarine = str => (str && typeof str === 'string') ? str.split('|')[0] : '';\n    const colorProcessor = this.colorProcessor;\n    const getConfirmedCount = this.getConfirmedCount;\n    d3\n      .select(this.geoMacau)\n      .selectAll('path')\n      .data(specialAdministrativeRegions)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', function(d) {\n        const color = colorProcessor(d);\n        return color;\n        // return DEFAULT_MAP_COLOR;\n      })\n      .attr('stroke', BORDER_COLOR)\n      .attr('stroke-width', 0.5)\n      .on('mouseover', function (d) {\n        d3\n          .select(this)\n          .attr('stroke-width', 1);\n        tooltip.style('display', 'block').html(`\n          <div>\n            ${d.properties.NAME_LOCAL}\n          </div>\n          <div>\n            確診人數：${formatNumber(getConfirmedCount(d))}\n          </div>\n        `);\n      })\n      .on('mousemove', (d) => {\n        let positionX = d3.event.clientX + 10;\n        const positionY = d3.event.clientY;\n        const tooltipRect = tooltipTrack.getBoundingClientRect();\n        if ((positionX + tooltipRect.width) > window.innerWidth) {\n          positionX = d3.event.clientX - tooltipRect.width - 10;\n        }\n        tooltip\n          .style('top', `${positionY}px`)\n          .style('left', `${positionX}px`)\n          .html(`\n            <div>\n              ${truncateSimplifiedMandarine(d.properties.NAME_LOCAL)}\n            </div>\n            <div>\n              確診人數：${formatNumber(getConfirmedCount(d))}\n            </div>\n          `);\n      })\n      .on('mouseout', function () {\n        d3\n          .select(this)\n          .attr('stroke-width', 0.5);\n        tooltip.style('display', 'none');\n      });\n  }\n\n  _drawHongKong() {\n    const { step } = this.state;\n    const clientWidth = this.hongKongContainer.clientWidth;\n    const clientHeight = clientWidth * mapRatioHongKong;\n    this.hongKongContainer.style.height = `${clientHeight + (clientHeight * 0.3)}px`;\n    const projection = d3\n      .geoMercator()\n      .scale(clientWidth * scaleRatioHongKong)\n      .center([centerChinaLongtitude + 9.63, centerChinaLatitude - 15.25])\n      .translate([clientWidth / 2, clientHeight / 2]);\n\n    const path = d3.geoPath(projection);\n    // const countries = topojson.feature(global, global.objects.countries).features;\n    const specialAdministrativeRegions = topojson.feature(hongKong, hongKong.objects.layer1).features;\n    const tooltip = d3.select(this.tooltip);\n    // const tooltipDimension = this.tooltip.getBoundingClientRect();\n    const tooltipTrack = this.tooltip;\n    const truncateSimplifiedMandarine = str => (str && typeof str === 'string') ? str.split('|')[0] : '';\n    const colorProcessor = this.colorProcessor;\n    const getConfirmedCount = this.getConfirmedCount;\n    d3\n      .select(this.geoHongKong)\n      .selectAll('path')\n      .data(specialAdministrativeRegions)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', function(d) {\n        const color = colorProcessor(d);\n        return color;\n        // return DEFAULT_MAP_COLOR;\n      })\n      .attr('stroke', BORDER_COLOR)\n      .attr('stroke-width', 0.5)\n      .on('mouseover', function (d) {\n        d3\n          .select(this)\n          .attr('stroke-width', 1);\n        tooltip.style('display', 'block').html(`\n          <div>\n            ${d.properties.NAME_LOCAL}\n          </div>\n          <div>\n            確診人數：${formatNumber(getConfirmedCount(d))}\n          </div>\n        `);\n      })\n      .on('mousemove', (d) => {\n        let positionX = d3.event.clientX + 10;\n        const positionY = d3.event.clientY;\n        const tooltipRect = tooltipTrack.getBoundingClientRect();\n        if ((positionX + tooltipRect.width) > window.innerWidth) {\n          positionX = d3.event.clientX - tooltipRect.width - 10;\n        }\n        tooltip\n          .style('top', `${positionY}px`)\n          .style('left', `${positionX}px`)\n          .html(`\n            <div>\n              ${truncateSimplifiedMandarine(d.properties.NAME_LOCAL)}\n            </div>\n            <div>\n              確診人數：${formatNumber(getConfirmedCount(d))}\n            </div>\n          `);\n      })\n      .on('mouseout', function () {\n        d3\n          .select(this)\n          .attr('stroke-width', 0.5);\n        tooltip.style('display', 'none');\n      });\n  }\n\n  _drawChina() {\n    const { step } = this.state;\n    const clientWidth = this.canvasContainer.clientWidth;\n    const clientHeight = clientWidth * mapRatio;\n    this.geo.style.height = clientHeight;\n    const projection = d3\n      .geoMercator()\n      .scale(clientWidth * scaleRatio)\n      .center([centerChinaLongtitude + 4, centerChinaLatitude])\n      .translate([clientWidth / 2, clientHeight / 2]);\n\n    const path = d3.geoPath(projection);\n    // const countries = topojson.feature(global, global.objects.countries).features;\n    const provinces = topojson.feature(china, china.objects.provinces).features;\n    const tooltip = d3.select(this.tooltip);\n    const truncateSimplifiedMandarine = str => (str && typeof str === 'string') ? str.split('|')[0] : '';\n    const colorProcessor = this.colorProcessor;\n    const getConfirmedCount = this.getConfirmedCount;\n    d3\n      .select(this.geo)\n      .selectAll('path')\n      .data(provinces)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('fill', function(d) {\n        const color = colorProcessor(d);\n        return color;\n      })\n      .attr('stroke', BORDER_COLOR)\n      .attr('stroke-width', 0.5)\n      .on('mouseover', function (d) {\n        d3\n          .select(this)\n          .attr('stroke-width', 1);\n        tooltip.style('display', 'block').html(`\n          <div>\n            ${truncateSimplifiedMandarine(d.properties.name_local)}\n          </div>\n          <div>\n            確診人數：${formatNumber(getConfirmedCount(d))}\n          </div>\n        `);\n      })\n      .on('mousemove', (d) => {\n        tooltip\n          .style('top', `${d3.event.clientY}px`)\n          .style('left', `${d3.event.clientX + 10}px`)\n          .html(`\n            <div>\n              ${truncateSimplifiedMandarine(d.properties.name_local)}\n            </div>\n            <div>\n              確診人數：${formatNumber(getConfirmedCount(d))}\n            </div>\n          `);\n      })\n      .on('mouseout', function () {\n        d3\n          .select(this)\n          .attr('stroke-width', 0.5);\n        tooltip.style('display', 'none');\n      });\n  }\n\n  _renderLegend() {\n    const Legends = mapLegends.map((label, index) => {\n      return (\n        <Legend\n          key={`${index}_${label}`}\n        >\n          <ColorIcon\n            backgrounColor={stageColorMap[index]}\n          />\n          <span>{label}</span>\n        </Legend>\n      );\n    });\n    return (\n      <NumericMapLegend>\n        {Legends}\n      </NumericMapLegend>\n    );\n  }\n\n  render() {\n    const { data } = this.props;\n    const { dateString } = this.state;\n    const sortedTimetamps = Object.keys(data);\n    const [month, day] = dateString.split('/');\n    return (\n      <Container>\n        {this._renderLegend()}\n        <CanvasContainer\n          ref={(node) => { this.canvasContainer = node; }}\n        >\n          <Geo\n            ref={(node) => { this.geo = node; }}\n          />\n          <HongContainer\n            ref={(node) => { this.hongKongContainer = node; }}\n          >\n            <GeoHongKong\n              ref={(node) => { this.geoHongKong = node; }}\n            />\n            <LocationLabel>香港</LocationLabel>\n          </HongContainer>\n          <MacauContainer\n            ref={(node) => { this.macauContainer = node; }}\n          >\n            <GeoMacau\n              ref={(node) => { this.geoMacau = node; }}\n            />\n            <LocationLabel>澳門</LocationLabel>\n          </MacauContainer>\n          <ToolTip\n            ref={(node) => { this.tooltip = node; }}\n          />\n        </CanvasContainer>\n        <Header>{`${month}月${day}日`}</Header>\n        <SliderWrapper>\n          <Slider\n            updateData={this.updateData}\n            totalSteps={sortedTimetamps.length}\n            startLabel={this.startDate}\n            endLabel={this.endDate}\n          />\n        </SliderWrapper>\n      </Container>\n    );\n  }\n}\n\nexport default ChinaChronological;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport * as d3 from 'd3';\nimport provinces from '../data/china-provinces.json';\n// import { fetchPrefecturalCity } from '../utils/api';\nimport prefectures from '../data/china-prefectural-cities/congregated-data-geo.json';\nimport { formatNumber } from '../utils';\nimport Slider from './Slider';\n\nconst width = 700;\nconst mapRatio = 0.58;\nconst scaleRatio = 0.71;\nconst height = width * mapRatio;\nconst centerChinaLongtitude = 104.4898;\nconst centerChinaLatitude = 37.5854;\nconst DEFAULT_MAP_COLOR = '#DADADA';\n// const BORDER_COLOR = '#333';\n\nconst strokeWidth = {\n  default: 0.2,\n  focus: 0.4,\n  howverFocus: 0.4,\n};\n\nconst strokeColor = {\n  default: 'white',\n  focus: '#333',\n};\n\nconst Container = styled.div`\n  margin: 0 auto;\n  max-width: ${width}px;\n  width: 100%;\n`;\n\nconst CanvasContainer = styled.div`\n  max-width: ${width}px;\n  box-sizing: content-box;\n  position: relative;\n  border: 1px solid black;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  margin: 20px 0;\n  background-color: #EEEEEE;\n`;\n\nconst Map = styled.svg`\n  width: 100%;\n  height: ${height}px;\n`;\n\nconst ToolTip = styled.div`\n  color: #222;\n  background: #fff;\n  border-radius: 3px;\n  box-shadow: 0px 0px 2px 0px #a6a6a6;\n  padding: .5em;\n  text-shadow: #f5f5f5 0 1px 0;\n  opacity: 0.9;\n  position: fixed;\n  display: none;\n  z-index: 999;\n`;\n\nconst generateTooltipContent = ({ name, adcode, data }) => {\n  const entity = data[adcode];\n  const emptyString = '無數據';\n  if (!entity) {\n    // console.log('has no data for the area - adcode ', adcode);\n    return `\n      <div>\n        目前尚無數據\n      </div>\n    `;\n  }\n  const {\n    confirmed,\n    suspected,\n    cured,\n    dead,\n  } = entity;\n  return `\n    <div>\n      <div>\n        ${name}\n      </div>\n      <div>\n        確診：${formatNumber(confirmed)}\n      </div>\n      <div>\n        疑似病例：${formatNumber(suspected)}\n      </div>\n      <div>\n        康復：${formatNumber(cured)}\n      </div>\n      <div>\n        死亡：${formatNumber(dead)}\n      </div>\n    </div>\n  `;\n};\n\nconst stageColorMap = {\n  0: DEFAULT_MAP_COLOR,\n  1: '#F5C6E9',\n  2: '#D493BC',\n  3: '#BC659A',\n  4: '#803D79',\n  5: '#451458',\n  6: '#270048',\n};\n\nconst getInfectedStageFromCount = (count) => {\n  if (count === 0) {\n    return 0;\n  }\n  if (count >= 1 && count <= 10) {\n    return 1;\n  }\n  if (count >= 11 && count <= 20) {\n    return 2;\n  }\n  if (count >= 21 && count <= 100) {\n    return 3;\n  }\n  if (count >= 101 && count <= 1000) {\n    return 4;\n  }\n  if (count >= 1001 && count <= 10000) {\n    return 5;\n  }\n  if (count >= 10001 && count <= 100000) {\n    return 6;\n  }\n  return 0;\n};\n\n\nclass PrefecturalChina extends Component {\n  constructor(props) {\n    super(props);\n    const { data } = props;\n    this.dataKeys = Object.keys(data);\n    this.state = {\n      legendStage: this.dataKeys.length - 1,\n    };\n    // sortedTimestamps;\n    this.map = null;\n    this.canvasContainer = null;\n    this.centered = null;\n    this.tooltip = null;\n    this.isTransitioning = null;\n    this.updateLegendStage = this._updateLegendStage.bind(this);\n  }\n\n  componentDidMount() {\n    d3.select(window).on(`resize.${PrefecturalChina.name}`, () => {\n      this._cleanCanvas();\n      this._drawChina();\n    });\n    this._drawChina();\n  }\n\n  _updateLegendStage(legendStage) {\n    const { data } = this.props;\n    // const currentTimestamp = this.dataKeys[legendStage];\n    // const { dateString } = data[currentTimestamp];\n    this.setState({\n      legendStage,\n    }, () => {\n      this._cleanCanvas();\n      this._drawChina();\n    });\n  }\n\n  _getTransitionStatus() {\n    return this.isTransitioning;\n  }\n\n  _cleanCanvas() {\n    d3\n      .select(this.map)\n      .selectAll('path')\n      .remove();\n  }\n\n  _cleanToolTip() {\n    this.tooltip.style.display = 'none';\n  }\n\n  _zoomOut(d3SelectedMap) {\n    this.isTransitioning = true;\n    const x = 0;\n    const y = 0;\n    const scaleValue = 1;\n    d3SelectedMap.transition()\n      .duration(750)\n      .attr('transform', `scale(${scaleValue}) translate(${x}, ${y})`)\n      .end()\n      .then(() => {\n        this.isTransitioning = false;\n        this._cleanToolTip();\n      })\n      .catch((e) => {\n        console.log('transition error');\n      })\n  }\n\n  _zoomIn(d, d3SelectedMap, path) {\n    this._cleanToolTip();\n    this.isTransitioning = true;\n    let x = 0;\n    let y = 0;\n    let scaleValue = 1;\n    const bounds = path.bounds(d);\n    const centroidX = (bounds[0][0] + bounds[1][0]) / 2;\n    const centroidY = (bounds[0][1] + bounds[1][1]) / 2;\n    const dx = bounds[1][0] - bounds[0][0];\n    const dy = bounds[1][1] - bounds[0][1];\n    const { clientWidth, clientHeight } = this.map;\n    x = clientWidth / 2 - centroidX;\n    y = clientHeight / 2 - centroidY;\n    scaleValue = Math.min(clientWidth / dx, clientHeight / dy) * 0.95;\n    d3SelectedMap.transition()\n      .duration(750)\n      .attr('transform', `scale(${scaleValue}) translate(${x}, ${y})`)\n      .end()\n      .then(() => {\n        this.isTransitioning = false;\n        this._cleanToolTip();\n      })\n      .catch((e) => {\n        console.log('transition error');\n      })\n  }\n\n  _cleanOutPrefectures(d, d3SelectedMap) {\n    d3SelectedMap\n      .selectAll('path.prefecture')\n      .filter((prefecture) => prefecture.properties.parent.adcode === this.centered.properties.adcode)\n      .style('display', 'none')\n      .attr('stroke-width', strokeWidth.default)\n      .attr('stroke', strokeColor.default);\n\n    d3SelectedMap\n      .selectAll('path.province')\n      .filter((province) => province.properties.adcode === this.centered.properties.adcode)\n      .attr('stroke-width', strokeWidth.default)\n      .attr('stroke', strokeColor.default);\n  }\n\n  _onClickPrefecture(d, d3SelectedMap) {\n    this._cleanOutPrefectures(d, d3SelectedMap);\n    this._zoomOut(d3SelectedMap);\n    this.centered = null;\n  }\n\n  _onClickProvince(d, d3SelectedMap, path) {\n    if (!d || this.centered === d) {\n      this.centered = null;\n      this._zoomOut(d3SelectedMap);\n      d3SelectedMap\n        .selectAll('path.prefecture')\n        .style('display', 'none');\n    } else {\n      // const centroid = path.centroid(d);\n      if (this.centered) {\n        this._cleanOutPrefectures(d, d3SelectedMap);\n      }\n      // const thePrefecturalCity = prefecturalCities[this.centered.properties.adcode];\n      d3SelectedMap\n        .selectAll('path.prefecture')\n        .filter((prefecture) => prefecture.properties.parent.adcode === d.properties.adcode)\n        .style('display', 'block')\n        .attr('stroke-width', strokeWidth.focus)\n        .attr('stroke', strokeColor.focus);\n\n      d3SelectedMap\n        .selectAll('path.province')\n        .filter((province) => province.properties.adcode === d.properties.adcode)\n        .attr('stroke-width', strokeWidth.focus)\n        .attr('stroke', strokeColor.focus);\n\n      this.centered = d;\n      this._zoomIn(d, d3SelectedMap, path);\n    }\n  }\n\n  _colorProcessor(d, isProvince) {\n    const { legendStage } = this.state;\n    const { data } = this.props;\n    const currentTimestamp = this.dataKeys[legendStage];\n    const { adcode } = d.properties;\n    const { data: extractedData } = data[currentTimestamp]\n    const entities = isProvince ? extractedData.provinces : extractedData.cities;\n    if (!entities[adcode]) {\n      // console.log('adcode: ', adcode)\n    }\n    const stage = getInfectedStageFromCount((entities[adcode] && entities[adcode].confirmed) || 0);\n    return stageColorMap[stage];\n  }\n\n  _drawChina() {\n    const { clientWidth } = this.canvasContainer;\n    const { data } = this.props;\n    const { legendStage } = this.state;\n    const clientHeight = clientWidth * mapRatio;\n    this.canvasContainer.style.height = `${clientHeight + 20}px`;\n    this.map.style.height = `${clientHeight}px`;\n    const scaleValue = clientWidth * scaleRatio;\n    const projection = d3\n      .geoMercator()\n      .scale(scaleValue)\n      .center([centerChinaLongtitude, centerChinaLatitude])\n      .translate([clientWidth / 2, clientHeight / 2]);\n\n    const path = d3.geoPath(projection);\n    const map = d3.select(this.map);\n\n    const isProvince = (d) => d.properties.level === 'province';\n    const d3SelectedTooltip = d3.select(this.tooltip);\n\n    const _getTransitionStatus = this._getTransitionStatus.bind(this);\n    const _dataKeys = this.dataKeys;\n    // const _colorProcessor = this._colorProcessor;\n\n// [...provinces.features, ...prefectures.features]\n    map\n      .selectAll('path')\n      .data([...provinces.features, ...prefectures.features])\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('class', (d) => {\n        if (isProvince(d)) {\n          return 'province';\n        }\n        return 'prefecture';\n      })\n      .attr('data-adcode', (d) => d.properties.adcode)\n      .attr('data-parent-adcode', (d) => d.properties.parent.adcode)\n      .style('display', (d) => {\n        if (isProvince(d)) {\n          return 'block';\n        }\n        return 'none';\n      })\n      .attr('stroke', strokeColor.default)\n      .attr('fill', (d) => this._colorProcessor(d, isProvince(d)))\n      .attr('stroke-width', strokeWidth.default)\n      .on('click', (d) => {\n        if (isProvince(d)) {\n          this._onClickProvince(d, map, path);\n        } else {\n          this._onClickPrefecture(d, map)\n        }\n      })\n      .on('mouseover', function (d) {\n        d3\n          .select(this)\n        d3SelectedTooltip\n          .style('display', 'block')\n          .html(generateTooltipContent({\n            name: d.properties.name,\n            adcode: d.properties.adcode,\n            data: isProvince(d) ? data[_dataKeys[legendStage]].data.provinces : data[_dataKeys[legendStage]].data.cities,\n          }));\n      })\n      .on('mousemove', (d) => {\n        let positionX = d3.event.clientX + 10;\n        const positionY = d3.event.clientY;\n        const tooltipRect = this.tooltip.getBoundingClientRect();\n        if ((positionX + tooltipRect.width) > window.innerWidth) {\n          positionX = d3.event.clientX - tooltipRect.width - 10;\n        }\n        d3SelectedTooltip\n          .style('top', `${positionY}px`)\n          .style('left', `${positionX}px`)\n          .html(generateTooltipContent({\n            name: d.properties.name,\n            adcode: d.properties.adcode,\n            data: isProvince(d) ? data[_dataKeys[legendStage]].data.provinces : data[_dataKeys[legendStage]].data.cities,\n          }));\n      })\n      .on('mouseout', function () {\n        if (!_getTransitionStatus()) {\n          d3\n            .select(this)\n          d3SelectedTooltip\n            .style('display', 'none');\n        }\n      });\n  }\n\n  render() {\n    const { data } = this.props;\n    const { legendStage } = this.state;\n    return (\n      <Container>\n        <div>{data[this.dataKeys[legendStage]].dateString}</div>\n        <CanvasContainer\n          ref={node => { this.canvasContainer = node; }}\n        >\n          <Map\n            ref={node => { this.map = node; }}\n          />\n          <ToolTip\n            ref={(node) => { this.tooltip = node; }}\n          />\n        </CanvasContainer>\n        {/*<Slider\n          totalSteps={this.dataKeys.length}\n          updateData={this.updateLegendStage}\n          startLabel={data[this.dataKeys[0]].dateString}\n          endLabel={data[this.dataKeys[this.dataKeys.length - 1]].dateString}\n        />*/}\n      </Container>\n    );\n  }\n}\n\n\nexport default PrefecturalChina;\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport * as d3 from 'd3';\nimport provinces from '../data/china-provinces-tranditional.json';\nimport prefectures from '../data/china-prefectural-cities/congregated-data-geo-tranditional.json';\nimport { formatNumber } from '../utils';\n// import InfoIcon from '../assets/map_legend_info_icon.svg';\nimport ZoomResetIcon from '../assets/zoom_reset_icon_dark.svg';\n// import Modal from './Modal';\n\n\nconst width = 650;\nconst mapRatio = 0.72;\nconst scaleRatio = 0.88;\nconst height = width * mapRatio;\nconst centerChinaLongtitude = 104.4898;\nconst centerChinaLatitude = 37.5854;\nconst DEFAULT_MAP_COLOR = '#DADADA';\n\nconst breakPoint = '910px';\n\nconst mapLegends = ['0', '1 - 50', '51 - 100', '100 +', '1000 +', '5,000 +', '10,000 +'];\n\n\nconst strokeWidth = {\n  default: 0.2,\n  focus: 0.4,\n  howverFocus: 0.4,\n};\n\nconst strokeColor = {\n  default: 'white',\n  focus: '#333',\n};\n\nconst Container = styled.div`\n  margin: 0 auto;\n  width: 100%;\n`;\n\n\nconst CanvasContainer = styled.div`\n  max-width: ${width}px;\n  box-sizing: border-box;\n  margin: 20px auto;\n  position: relative;\n`;\n\nconst SubCanvasContainer = styled.div`\n  width: 100%;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n`;\n\nconst Map = styled.svg`\n  width: 100%;\n  height: ${height}px;\n`;\n\nconst LegendContainer = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  font-size: 12px;\n  transform: translate(-100%, 0);\n  @media (max-width: ${breakPoint}) {\n    transform: translate(0,100%);\n    bottom: -3px;\n  }\n`;\n\nconst LegendsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 10px 0;\n  @media (max-width: 910px) {\n    display: grid;\n    grid-template-columns: auto auto auto auto;\n    > div {\n      padding-right: 15px;\n    }\n  }\n  @media (max-width: 767px) {\n    display: grid;\n    grid-template-columns: auto auto auto;\n    > div {\n      padding-right: 10px;\n    }\n  }\n  @media (max-width: 470px) {\n    display: grid;\n    grid-template-columns: auto auto;\n    > div {\n      padding-right: 10px;\n    }\n  }\n  @media (max-width: 373px) {\n    display: grid;\n    grid-template-columns: auto;\n    > div {\n      padding-right: 5px;\n    }\n  }\n`;\n\nconst ColorIcon = styled.div`\n  width: 10px;\n  height: 10px;\n  background-color: ${props => props.backgrounColor || 'white'};\n  border-radius: 50%;\n  margin-right: 5px;\n`;\n\nconst Legend = styled.div`\n  white-space: nowrap;\n  padding: 5px 0 5px 0;\n  display: flex;\n  align-items: center;\n`;\n\nconst InfoIconContainer = styled.div`\n  margin: 8px 0 7px 0;\n`;\n\nconst ToolTipWrapper = styled.div`\n  right: 0;\n  bottom: 0;\n  position: absolute;\n  z-index: 999;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  transform: translate(100%, 0);\n  @media (max-width: ${breakPoint}) {\n    transform: translate(0,100%);\n    bottom: -3px;\n  }\n`;\n\nconst ToolTip = styled.div`\n  min-width: 180px;\n  min-height: 157px;\n  color: #222;\n  background: #fff;\n  border: 1px solid #707070;\n  color: black;\n  > div {\n    padding: 16px;\n  }\n  > div > div {\n    &:nth-child(3) {\n      margin: 8px 0;\n    }\n  }\n  > div > div {\n    &:nth-child(1) {\n      border-bottom: 1px solid black;\n      padding-bottom: 8px;\n      margin-bottom: 8px;\n    }\n  }\n`;\n\n\nconst ResetZoom = styled.div`\n  position: absolute;\n  bottom: 3px;\n  right: 8px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  color: #000000;\n  cursor: pointer;\n  > svg {\n    margin-right: 10px;\n  }\n`;\n\n\nconst generateTooltipContent = ({ name, adcode, data }) => {\n  const emptyString = '目前尚無數據';\n  if (!data) {\n    return `\n      <div>\n        <div>${name}</div>\n        <div>${emptyString}</div>\n      </div>\n    `;\n  }\n  const entity = data[adcode];\n  if (!entity) {\n    // console.log('has no data for the area - adcode ', adcode);\n    return `\n      <div>\n        <div>${name}</div>\n        <div>${emptyString}</div>\n      </div>\n    `;\n  }\n  const {\n    confirmedCount,\n    currentConfirmedCount,\n    suspectedCount,\n    curedCount,\n    deadCount,\n  } = entity;\n  return `\n    <div>\n      <div>\n        ${name}\n      </div>\n      <div>\n        確診：${formatNumber(confirmedCount)}\n      </div>\n      <div>\n        死亡：${formatNumber(deadCount)}\n      </div>\n      <div>\n        康復：${formatNumber(curedCount)}\n      </div>\n    </div>\n  `;\n};\n\nconst stageColorMap = {\n  0: DEFAULT_MAP_COLOR,\n  1: '#FAF4C0',\n  2: '#FFE09D',\n  3: '#F2A966',\n  4: '#D493BC',\n  5: '#803D79',\n  6: '#270048',\n};\n\nconst getInfectedStageFromCount = (count) => {\n  if (count === 0) {\n    return 0;\n  }\n  if (count >= 1 && count <= 50) {\n    return 1;\n  }\n  if (count >= 51 && count <= 100) {\n    return 2;\n  }\n  if (count >= 101 && count <= 1000) {\n    return 3;\n  }\n  if (count >= 1001 && count <= 5000) {\n    return 4;\n  }\n  if (count >= 5001 && count <= 10000) {\n    return 5;\n  }\n  if (count >= 10001 && count <= 100000) {\n    return 6;\n  }\n  return 0;\n};\n\n\nclass PrefecturalChinaV2 extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      test: null,\n    };\n    const { data } = props;\n    this.map = null;\n    this.canvasContainer = null;\n    this.centered = null;\n    this.tooltip = null;\n    this.isTransitioning = null;\n    this.updateLegendStage = this._updateLegendStage.bind(this);\n    this.zoom = null;\n    this.hookUpZoomMap = null;\n  }\n\n  componentDidMount() {\n    this._hookupZoom();\n\n    d3.select(window).on(`resize.${PrefecturalChinaV2.name}`, () => {\n      this._cleanCanvas();\n      this._drawChina();\n    });\n    this._drawChina();\n  }\n\n  componentDidUpdate() {\n    this._cleanCanvas();\n    this._drawChina();\n  }\n\n  _hookupZoom() {\n    const { clientWidth } = this.canvasContainer;\n    const scaleValue = clientWidth * scaleRatio;\n    const map = d3.select(this.map);\n    const zoom = d3.zoom()\n      .scaleExtent([1, 8])\n      .on('zoom', () => { this._customizedZoom(map); });\n    map.call(zoom);\n    this.hookUpZoomMap = map;\n    this.zoom = zoom;\n  }\n\n  _customizedZoom(map) {\n    // const { k,x,y } = d3.event.transform;\n    map\n      .selectAll('path') // To prevent stroke width from scaling\n      .attr('transform', d3.event.transform);\n  }\n\n  _resetCustomizedZoom(d3SelectedMap) {\n    d3SelectedMap\n      .selectAll('path')\n      .transition()\n      .duration(750)\n      .attr('transform', `scale(${1}) translate(${0}, ${0})`)\n      .end()\n      .then(() => {\n        if (this.hookUpZoomMap && this.zoom) {\n          this.hookUpZoomMap.call(this.zoom.transform, d3.zoomIdentity);\n        }\n      })\n      .catch((e) => {\n        console.log('transition error');\n      })\n  }\n\n  _renderLegend() {\n    const { data } = this.props;\n    const dateObject = data ? new Date(data.latestUpdatedTimeStamp) : null;\n    const dateString = dateObject ? `${dateObject.getFullYear()}/${dateObject.getMonth() + 1}/${dateObject.getDate()}` : '';\n    const Legends = mapLegends.map((label, index) => {\n      return (\n        <Legend\n          key={`${index}_${label}`}\n        >\n          <ColorIcon\n            backgrounColor={stageColorMap[index]}\n          />\n          <span>{label}</span>\n        </Legend>\n      );\n    });\n    return (\n      <LegendContainer>\n        <div>確診人數</div>\n        <LegendsWrapper>\n          {Legends}\n        </LegendsWrapper>\n        {/*<InfoIconContainer>\n          <InfoIcon width={17} height={17} />\n        </InfoIconContainer>*/}\n        <div>更新時間：{dateString}</div>\n      </LegendContainer>\n    );\n  }\n\n  _updateLegendStage(legendStage) {\n    const { data } = this.props;\n    this.setState({\n      legendStage,\n    }, () => {\n      this._cleanCanvas();\n      this._drawChina();\n    });\n  }\n\n  _getTransitionStatus() {\n    return this.isTransitioning;\n  }\n\n  _cleanCanvas() {\n    d3\n      .select(this.map)\n      .selectAll('path')\n      .remove();\n  }\n\n  // _cleanToolTip() {\n  //   this.tooltip.style.display = 'none';\n  // }\n\n  _zoomOut(d3SelectedMap) {\n    this.isTransitioning = true;\n    const x = 0;\n    const y = 0;\n    const scaleValue = 1;\n\n    this._resetCustomizedZoom(d3SelectedMap);\n\n    d3SelectedMap.transition()\n      .duration(750)\n      .attr('transform', `scale(${scaleValue}) translate(${x}, ${y})`)\n      .end()\n      .then(() => {\n        this.isTransitioning = false;\n        // this._cleanToolTip();\n      })\n      .catch((e) => {\n        console.log('transition error');\n      })\n  }\n\n  _zoomIn(d, d3SelectedMap, path) {\n    // this._cleanToolTip();\n    this.isTransitioning = true;\n    let x = 0;\n    let y = 0;\n    let scaleValue = 1;\n    const bounds = path.bounds(d);\n    const centroidX = (bounds[0][0] + bounds[1][0]) / 2;\n    const centroidY = (bounds[0][1] + bounds[1][1]) / 2;\n    const dx = bounds[1][0] - bounds[0][0];\n    const dy = bounds[1][1] - bounds[0][1];\n    const { clientWidth, clientHeight } = this.map;\n    x = clientWidth / 2 - centroidX;\n    y = clientHeight / 2 - centroidY;\n    scaleValue = Math.min(clientWidth / dx, clientHeight / dy) * 0.95;\n\n    this._resetCustomizedZoom(d3SelectedMap);\n\n    d3SelectedMap\n      .transition()\n      .duration(750)\n      .attr('transform', `scale(${scaleValue}) translate(${x}, ${y})`)\n      .end()\n      .then(() => {\n        this.isTransitioning = false;\n        // this._cleanToolTip();\n      })\n      .catch((e) => {\n        console.log('transition error');\n      })\n  }\n\n  _cleanOutPrefectures(d3SelectedMap) {\n    if (this.centered) {\n      d3SelectedMap\n        .selectAll('path.prefecture')\n        .filter((prefecture) => prefecture.properties.parent.adcode === this.centered.properties.adcode)\n        .style('display', 'none')\n        .attr('stroke-width', strokeWidth.default)\n        .attr('stroke', strokeColor.default);\n\n      d3SelectedMap\n        .selectAll('path.province')\n        .filter((province) => province.properties.adcode === this.centered.properties.adcode)\n        .attr('stroke-width', strokeWidth.default)\n        .attr('stroke', strokeColor.default);\n    }\n  }\n\n  _onClickPrefecture(d, d3SelectedMap) {\n    // this._cleanOutPrefectures(d3SelectedMap);\n    // this._zoomOut(d3SelectedMap);\n    // this.centered = null;\n  }\n\n  _onClickProvince(d, d3SelectedMap, path) {\n    if (!d || this.centered === d) {\n      // this.centered = null;\n      // this._zoomOut(d3SelectedMap);\n      // d3SelectedMap\n      //   .selectAll('path.prefecture')\n      //   .style('display', 'none');\n    } else {\n      // const centroid = path.centroid(d);\n      if (this.centered) {\n        this._cleanOutPrefectures(d3SelectedMap);\n      }\n      // const thePrefecturalCity = prefecturalCities[this.centered.properties.adcode];\n      d3SelectedMap\n        .selectAll('path.prefecture')\n        .filter((prefecture) => prefecture.properties.parent.adcode === d.properties.adcode)\n        .style('display', 'block')\n        .attr('stroke-width', strokeWidth.focus)\n\n      d3SelectedMap\n        .selectAll('path.province')\n        .filter((province) => province.properties.adcode === d.properties.adcode)\n        .attr('stroke-width', strokeWidth.focus)\n\n      this.centered = d;\n      this._zoomIn(d, d3SelectedMap, path);\n    }\n  }\n\n  _colorProcessor(d, isProvince) {\n    const { data } = this.props;\n    if (!data) {\n      return stageColorMap[0];\n    }\n    const { adcode } = d.properties;\n    const entities = isProvince ? data.provinces : data.cities;\n    if (!entities[adcode]) {\n      // console.log('adcode: ', adcode)\n    }\n    const stage = getInfectedStageFromCount((entities[adcode] && entities[adcode].confirmedCount) || 0);\n    return stageColorMap[stage];\n  }\n\n  _drawChina() {\n    const { clientWidth } = this.canvasContainer;\n    const { data } = this.props;\n    const clientHeight = clientWidth * mapRatio;\n    this.canvasContainer.style.height = `${clientHeight}px`;\n    this.map.style.height = `${clientHeight}px`;\n    const scaleValue = clientWidth * scaleRatio;\n    const projection = d3\n      .geoMercator()\n      .scale(scaleValue)\n      .center([centerChinaLongtitude, centerChinaLatitude])\n      .translate([clientWidth / 2, clientHeight / 2]);\n\n    const path = d3.geoPath(projection);\n    const map = d3.select(this.map);\n\n    const isProvince = (d) => d.properties.level === 'province';\n    const d3SelectedTooltip = d3.select(this.tooltip);\n\n    const _getTransitionStatus = this._getTransitionStatus.bind(this);\n\n    const getTooltipData = (d, data) => {\n      if (!data) {\n        return null;\n      }\n      return isProvince(d) ? data.provinces : data.cities;\n    };\n\n    map\n      .selectAll('path')\n      .data([...provinces.features, ...prefectures.features])\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .attr('class', (d) => {\n        if (isProvince(d)) {\n          return 'province';\n        }\n        return 'prefecture';\n      })\n      .attr('data-adcode', (d) => d.properties.adcode)\n      .attr('data-parent-adcode', (d) => d.properties.parent.adcode)\n      .style('display', (d) => {\n        if (isProvince(d)) {\n          return 'block';\n        }\n        return 'none';\n      })\n      .attr('stroke', strokeColor.default)\n      .attr('fill', (d) => this._colorProcessor(d, isProvince(d)))\n      .attr('stroke-width', strokeWidth.default)\n      .on('click', (d) => {\n        if (isProvince(d)) {\n          this._onClickProvince(d, map, path);\n        } else {\n          this._onClickPrefecture(d, map)\n        }\n      })\n      .on('mouseover', function (d) {\n        d3\n          .select(this)\n        d3SelectedTooltip\n          .style('display', 'block')\n          .html(generateTooltipContent({\n            name: d.properties.name,\n            adcode: d.properties.adcode,\n            data: getTooltipData(d, data),\n          }));\n      })\n      .on('mousemove', (d) => {\n        // let positionX = d3.event.clientX + 10;\n        // const positionY = d3.event.clientY;\n        // const tooltipRect = this.tooltip.getBoundingClientRect();\n        // if ((positionX + tooltipRect.width) > window.innerWidth) {\n        //   positionX = d3.event.clientX - tooltipRect.width - 10;\n        // }\n        d3SelectedTooltip\n          // .style('top', `${positionY}px`)\n          // .style('left', `${positionX}px`)\n          .html(generateTooltipContent({\n            name: d.properties.name,\n            adcode: d.properties.adcode,\n            data: getTooltipData(d, data),\n          }));\n      })\n      .on('mouseout', () => {\n        if (!_getTransitionStatus()) {\n          this._renderDefaultToolTipContent();\n        }\n      });\n  }\n\n  _renderDefaultToolTipContent() {\n    const { countryData } = this.props;\n    if (!countryData || !this.tooltip) {\n      return null;\n    }\n    const { confirmedCount, deadCount, curedCount } = countryData;\n    if (this.tooltip) {\n      this.tooltip.innerHTML = `\n        <div>\n          <div>中國</div>\n          <div>\n            確診：${formatNumber(confirmedCount)}\n          </div>\n          <div>\n            死亡：${formatNumber(deadCount)}\n          </div>\n          <div>\n            康復：${formatNumber(curedCount)}\n          </div>\n        </div>\n      `;\n    }\n  }\n\n  render() {\n    this._renderDefaultToolTipContent();\n    return (\n      <Container>\n        <CanvasContainer\n          ref={node => { this.canvasContainer = node; }}\n        >\n          <SubCanvasContainer>\n            <Map\n              ref={node => { this.map = node; }}\n            />\n          </SubCanvasContainer>\n          <ResetZoom\n            onClick={() => {\n              const map = d3.select(this.map);\n              this._cleanOutPrefectures(map)\n              this._zoomOut(map);\n              this.centered = null;\n            }}\n          >\n            <ZoomResetIcon />\n            <span>回上一層</span>\n          </ResetZoom>\n          <ToolTipWrapper>\n            {/*<ResetZoom\n              onClick={() => {\n                const map = d3.select(this.map);\n                this._cleanOutPrefectures(map)\n                this._zoomOut(map);\n                this.centered = null;\n              }}\n            >\n              <ZoomResetIcon />\n              <span>回上一層</span>\n            </ResetZoom>*/}\n            <ToolTip\n              ref={(node) => { this.tooltip = node; }}\n            />\n          </ToolTipWrapper>\n          {this._renderLegend()}\n        </CanvasContainer>\n        {/*<Modal>\n          test\n        </Modal>*/}\n      </Container>\n    );\n  }\n}\n\n\nexport default PrefecturalChinaV2;\n","import config from '../../config/config';\n\nconst { coronavirusAPIOrigin, coronavirusAPIPath } = config;\n\nconst asyncResolver = async (promise) => {\n  const res = {\n    data: null,\n    error: null,\n  };\n  try {\n    const response = await promise;\n    res.data = await response.json();\n    return res;\n  } catch (e) {\n    res.error = e;\n    return res;\n  }\n};\n\nasync function fetchCoronavirusAreaData() {\n  const result = await asyncResolver(fetch(`${coronavirusAPIOrigin}/${coronavirusAPIPath}/area?latest=1`));\n  return result;\n}\n\nasync function fetchChianOverallData() {\n  const result = await asyncResolver(fetch(`${coronavirusAPIOrigin}/${coronavirusAPIPath}/overall`));\n  return result.data.results[0];\n}\n\nexport default {\n  fetchCoronavirusAreaData,\n  fetchChianOverallData,\n};\n","export default {\n  coronavirusAPIOrigin: 'https://lab.isaaclin.cn',\n  coronavirusAPIPath: 'nCoV/api',\n};\n","const filterOutNonChina = (data) => data.filter((entity) => entity.countryEnglishName === 'China');\n\nconst formatData = (data) => {\n  if (Array.isArray(data) && data.length !== 0) {\n    const latestUpdatedTime = data[0].updateTime;\n    const formatedData = {};\n    data.forEach((province) => {\n      let cities = null;\n      if (province.cities && Array.isArray(province.cities)) {\n        cities = (() => {\n          const tmpCities = {};\n          province.cities.forEach((city) => {\n            tmpCities[city.locationId] = city;\n          });\n          return tmpCities;\n        })();\n      }\n      formatedData[province.locationId] = {\n        ...province.locationId,\n        cities,\n      };\n    });\n    return {\n      latestUpdatedTime,\n      data: formatedData,\n    };\n  }\n  return null;\n};\n\nconst formatDataNormalization = (data) => {\n  if (Array.isArray(data) && data.length !== 0) {\n    const latestUpdatedTimeStamp = data[0].updateTime;\n    const provincesData = {};\n    let citiesData = {};\n    data.forEach((province) => {\n      const cityIds = [];\n      let tmpCitiesData = {};\n      if (province.cities && Array.isArray(province.cities)) {\n        tmpCitiesData = (() => {\n          const tmpCities = {};\n          let exceptionIndex = 0;\n          province.cities.forEach((city) => {\n            let { locationId } = city;\n            if (city.locationId === 0 || city.locationId === -1) {\n              locationId = `${province.locationId}/${exceptionIndex}`;\n              exceptionIndex += 1;\n            }\n            cityIds.push(locationId);\n            tmpCities[locationId] = city;\n          });\n          return tmpCities;\n        })();\n        citiesData = {\n          ...citiesData,\n          ...tmpCitiesData,\n        };\n      }\n      provincesData[province.locationId] = {\n        ...province,\n        cities: cityIds,\n      };\n    });\n    return {\n      latestUpdatedTimeStamp,\n      provinces: provincesData,\n      cities: citiesData,\n    };\n  }\n  return null;\n};\n\nconst pipe = (...fns) => (intialState) => fns.reduce((acc, fn) => fn(acc), intialState);\n\nconst extractData = pipe(filterOutNonChina, formatDataNormalization);\n\n\nexport {\n  filterOutNonChina,\n  formatData,\n  extractData,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport ChinaChronological from './components/ChinaChronological';\nimport PrefecturalChina from './components/PrefecturalChina';\nimport PrefecturalChinaV2 from './components/PrefecturalChinaV2';\n\nimport testData from './data/testData.json';\nimport coronavirus from './data/virus/coronavirus.json';\nimport API from './utils/api';\nimport { extractData } from './utils/blankerl';\n\nconst Container = styled.div`\n  padding: 20px;\n`;\n\nconst Header = styled.h1`\n  margin-bottom: 20px;\n`;\n\nconst Section = styled.div`\n  margin: 50px 0;\n`;\n\nconst MapContainer = styled.div`\n  max-width: 1024px;\n  margin: 0 auto;\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coronavirusDataPrefecturalLevel: null,\n      coronavirusCountryLevel: null,\n    };\n  }\n\n  async componentDidMount() {\n    const res = await API.fetchCoronavirusAreaData();\n    // const data = filterOutNonChina(res.data.results);\n    const countryRes = await API.fetchChianOverallData();\n    const { confirmedCount, deadCount, curedCount } = countryRes;\n    const data = extractData(res.data.results);\n    this.setState({\n      coronavirusDataPrefecturalLevel: data,\n      coronavirusCountryLevel: {\n        confirmedCount,\n        deadCount,\n        curedCount,\n      },\n    });\n  }\n\n  render() {\n    const { coronavirusDataPrefecturalLevel, coronavirusCountryLevel } = this.state;\n    return (\n      <Container>\n        <Header>Map Demo 2</Header>\n        <Section>\n          <div>資料來源：丁香醫生</div>\n          <MapContainer>\n            <PrefecturalChinaV2\n              countryData={coronavirusCountryLevel}\n              data={coronavirusDataPrefecturalLevel}\n            />\n          </MapContainer>\n        </Section>\n        {/*<Section>\n          <div>資料來源：每日頭條（github.com/canghailan）</div>\n          <PrefecturalChina\n            data={coronavirus}\n          />\n        </Section>\n        <Section>\n          <ChinaChronological\n            data={testData}\n          />\n      </Section>*/}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable comma-dangle */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\n// import fetchSpreadSheet from './utils/fetchSpreadSheetv2';\n//\n// fetchSpreadSheet((data) => {\n//   console.log(data);\n// })\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n"],"sourceRoot":""}